day21

* QR 체크 확인!!!
* DBMS, JAVA 멘토씨리즈 교재 준비
* 각 팀 8시 59분 59초에 안왔던 사람들 체크하기


멘토씨리즈 교재(예외처리, 컬렉션프레임워크)

팀 과제
- 도서 대출 프로그램
- 사용자는 로그인하고 책을 대출할 수 있음(최대 20권)
- 책은 대출 가능 상태일 때만 대출 가능
- 객체지향 설계 원칙(상속, 다형성, 추상화, 인터페이스, 예외처리, 컬렉션 프레임워크)

1번   사용자 설계자    User, LoginManager   User 추상클래스 설계
                  사용자 기본정보
                  LoginManager 클래스 설계
                  (Map에 사용자 저장/조회)
                  사용자 로그인 기능 구현
2번   회원 기능 담당   Member         User 클래스 상속
                  List 필드
                  로그인 메소드 오버라이딩
                  도서대출 메소드
                  도서반납 메소드
                  대출중인 책 목록 확인 메소드   
3번    도서 설계자   Book, Borrow 인터페이스   Borrow 인터페이스
                  추상 메소드 2개(대여 -> 예외 던지기, 반납)
                  Book 클래스 설계
                  도서와 관련된 기본정보
                  도서 대출 메소드 오버라이딩
                  equals, hashCode 오버라이딩
4번   서비스 로직 설계자   LibraryService      리스트 필드
                  도서목록 출력 메소드
                  도서 검색 메소드
                  도서 대여 메소드(매개변수 2개 = Member, 도서제목)
                  도서 반납 메소드(매개변수 2개 = Member, 도서제목)

5번   예외클래스      MaxBorrowException      사용자 정의 예외 클래스
         BookNotAvailableException
         BookAlreadyException
         ConsoleUI      ConsoleUI 클래스의 메소드 6번과 나눠서 작성할 것
                  
6번    UI 및 실행   ConsoleUI, LibraryApp   ConsoleUI 클래스
                  번호로 입력(Scanner 입력)
                  메뉴 메소드
                  대출할 책 목록 메소드
                  반납할 책 목록 메소드

                  LibraryApp 클래스
                  main메소드




-----------------------------------------------------------------------------------------
패키지명, 클래스명, 필드명, 메소드명, 추상메소드
library

보라 abstract class User
   //사용자 기본정보 필드
   String id;
   String password;
   String name;
   abstract 로그인
   
보라 LoginManager
   map<id :String, User> 사용자
   public boolean addUser(id, pw, name) // 이미 존재하면 false, 추가하면 true
   public User getUser(String id)
   public boolean login(id, pw)
      if(map.containsKey(id)) 
         return 사용자.login(id, pw)
      else
         return false;

버들 Member : User
   list<String> bookNameList
   @Override
   boolean 로그인(id, pw) {내꺼랑 같은지 판단}
   대출 add throws MaxBorrowException -> bookId.add
   반납 boolean remove -> bookId.remove
   대출 중인 책 목록 확인 메소드 return bookId

용문 interface Borrow
   대여 -> 예외던지기
   반납 
용문 Book : Borrow
   도서관련 기본정보
   String name;
   String writer;
   boolean 대출여부;

   @Override
   대여() -> 대출여부에따라 예외처리 생성해서 던지고,
      대출여부 = true;
   @Override
   boolean 반납() -> 이미 반납된 책
      대출여부 = false;
   @Override
   equals      책이름이랑 hashCode
   @Override
   toString   name
   @Override
   hashCode   name?
   
기수 LibraryService
   리스트<Borrow> = <Book>//업캐스팅
   
   기본생성자   
      리스트<Borrow> = <Book>
   
   List<String> getBookList()
   boolean 대여(Member, 도서제목) throws 대출여부에따라 예외처리; 
      book -> 대여 호출
      member -> 대여 호출
   boolean 반납(Member, 도서제목) book -> 반납 호출
      book -> > 반납 호출
      member -> 반납 호출
   
건아 MaxBorrowException, BookNotAvailableException, BookAlreayException

건아 ConsoleUI (입출력 클래스)
   String[] printMenu = {
      "로그인/로그아웃/회원가입/ 입력>>",
      "나의 대여 정보/도서관 책목록 조회/대여/반납 입력>>"",
   }   

   int or enum 회원관련선택번호(로그인/로그아웃/회원가입)
   int or enum 메뉴 번호(나의 대여 정보/도서관 책목록 조회/대여/반납)

   print(int idx)

   print(String title, List<String> 책목록){
      //책목록 null 예외처리
      syso(title)
      
      for(책 : 책목록)
         syso(책)
      syso(입력>>)
   }

   

건아 LibraryApp (실행용 클래스)
   로그인
   로그아웃
   회원가입
   
   나의 대여 정보
   도서관 책목록 조회
   대여
   반납

   Member firstAccess()
      ConsoleUI->print(로그인 idx)
      int choice = 회원관련선택번호();
      
      switch(choice)
      case
         ConsoleUI->login
      case
         ConsoleUI->회원가입

   
   main
      while
         member = firstAccess;
         LoginManager -> 사용자 추가
   
   
   